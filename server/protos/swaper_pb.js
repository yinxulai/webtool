/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.standard.CreateUnitDataRequest', null, global);
goog.exportSymbol('proto.standard.CreateUnitDataResponse', null, global);
goog.exportSymbol('proto.standard.DestroyUnitDataByKeyRequest', null, global);
goog.exportSymbol('proto.standard.DestroyUnitDataByKeyResponse', null, global);
goog.exportSymbol('proto.standard.GetUnitDataByKeyRequest', null, global);
goog.exportSymbol('proto.standard.GetUnitDataByKeyResponse', null, global);
goog.exportSymbol('proto.standard.State', null, global);
goog.exportSymbol('proto.standard.UnitData', null, global);
goog.exportSymbol('proto.standard.UpdateUnitDataBodyByKeyRequest', null, global);
goog.exportSymbol('proto.standard.UpdateUnitDataBodyByKeyResponse', null, global);
goog.exportSymbol('proto.standard.UpdateUnitDataDestroyTimeByKeyRequest', null, global);
goog.exportSymbol('proto.standard.UpdateUnitDataDestroyTimeByKeyResponse', null, global);
goog.exportSymbol('proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest', null, global);
goog.exportSymbol('proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse', null, global);
goog.exportSymbol('proto.standard.UpdateUnitDataExpiryTimeByKeyRequest', null, global);
goog.exportSymbol('proto.standard.UpdateUnitDataExpiryTimeByKeyResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UnitData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UnitData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UnitData.displayName = 'proto.standard.UnitData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UnitData.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UnitData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UnitData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UnitData.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expirytime: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdtime: jspb.Message.getFieldWithDefault(msg, 3, ""),
    destroytime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    updatedtime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    deletedtime: jspb.Message.getFieldWithDefault(msg, 6, ""),
    effectivetime: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UnitData}
 */
proto.standard.UnitData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UnitData;
  return proto.standard.UnitData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UnitData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UnitData}
 */
proto.standard.UnitData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpirytime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedtime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestroytime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatedtime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeletedtime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEffectivetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UnitData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UnitData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UnitData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UnitData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpirytime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedtime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDestroytime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUpdatedtime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDeletedtime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEffectivetime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string Body = 1;
 * @return {string}
 */
proto.standard.UnitData.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.UnitData.prototype.setBody = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ExpiryTime = 2;
 * @return {string}
 */
proto.standard.UnitData.prototype.getExpirytime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.standard.UnitData.prototype.setExpirytime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string CreatedTime = 3;
 * @return {string}
 */
proto.standard.UnitData.prototype.getCreatedtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.standard.UnitData.prototype.setCreatedtime = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string DestroyTime = 4;
 * @return {string}
 */
proto.standard.UnitData.prototype.getDestroytime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.standard.UnitData.prototype.setDestroytime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string UpdatedTime = 5;
 * @return {string}
 */
proto.standard.UnitData.prototype.getUpdatedtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.standard.UnitData.prototype.setUpdatedtime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string DeletedTime = 6;
 * @return {string}
 */
proto.standard.UnitData.prototype.getDeletedtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.standard.UnitData.prototype.setDeletedtime = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string EffectiveTime = 7;
 * @return {string}
 */
proto.standard.UnitData.prototype.getEffectivetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.standard.UnitData.prototype.setEffectivetime = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.CreateUnitDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.CreateUnitDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.CreateUnitDataRequest.displayName = 'proto.standard.CreateUnitDataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.CreateUnitDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.CreateUnitDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.CreateUnitDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.CreateUnitDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expirytime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    destroytime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    effectivetime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.CreateUnitDataRequest}
 */
proto.standard.CreateUnitDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.CreateUnitDataRequest;
  return proto.standard.CreateUnitDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.CreateUnitDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.CreateUnitDataRequest}
 */
proto.standard.CreateUnitDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpirytime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDestroytime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEffectivetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.CreateUnitDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.CreateUnitDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.CreateUnitDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.CreateUnitDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpirytime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDestroytime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEffectivetime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string Body = 1;
 * @return {string}
 */
proto.standard.CreateUnitDataRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.CreateUnitDataRequest.prototype.setBody = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 ExpiryTime = 2;
 * @return {number}
 */
proto.standard.CreateUnitDataRequest.prototype.getExpirytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.standard.CreateUnitDataRequest.prototype.setExpirytime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 DestroyTime = 3;
 * @return {number}
 */
proto.standard.CreateUnitDataRequest.prototype.getDestroytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.standard.CreateUnitDataRequest.prototype.setDestroytime = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 EffectiveTime = 4;
 * @return {number}
 */
proto.standard.CreateUnitDataRequest.prototype.getEffectivetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.standard.CreateUnitDataRequest.prototype.setEffectivetime = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.CreateUnitDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.CreateUnitDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.CreateUnitDataResponse.displayName = 'proto.standard.CreateUnitDataResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.CreateUnitDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.CreateUnitDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.CreateUnitDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.CreateUnitDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.CreateUnitDataResponse}
 */
proto.standard.CreateUnitDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.CreateUnitDataResponse;
  return proto.standard.CreateUnitDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.CreateUnitDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.CreateUnitDataResponse}
 */
proto.standard.CreateUnitDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!proto.standard.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.CreateUnitDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.CreateUnitDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.CreateUnitDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.CreateUnitDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.standard.CreateUnitDataResponse.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.CreateUnitDataResponse.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional State State = 2;
 * @return {!proto.standard.State}
 */
proto.standard.CreateUnitDataResponse.prototype.getState = function() {
  return /** @type {!proto.standard.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.standard.State} value */
proto.standard.CreateUnitDataResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string Message = 3;
 * @return {string}
 */
proto.standard.CreateUnitDataResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.standard.CreateUnitDataResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.GetUnitDataByKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.GetUnitDataByKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.GetUnitDataByKeyRequest.displayName = 'proto.standard.GetUnitDataByKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.GetUnitDataByKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.GetUnitDataByKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.GetUnitDataByKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.GetUnitDataByKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.GetUnitDataByKeyRequest}
 */
proto.standard.GetUnitDataByKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.GetUnitDataByKeyRequest;
  return proto.standard.GetUnitDataByKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.GetUnitDataByKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.GetUnitDataByKeyRequest}
 */
proto.standard.GetUnitDataByKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.GetUnitDataByKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.GetUnitDataByKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.GetUnitDataByKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.GetUnitDataByKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.standard.GetUnitDataByKeyRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.GetUnitDataByKeyRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.GetUnitDataByKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.GetUnitDataByKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.GetUnitDataByKeyResponse.displayName = 'proto.standard.GetUnitDataByKeyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.GetUnitDataByKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.GetUnitDataByKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.GetUnitDataByKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.GetUnitDataByKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: (f = msg.getData()) && proto.standard.UnitData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.GetUnitDataByKeyResponse}
 */
proto.standard.GetUnitDataByKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.GetUnitDataByKeyResponse;
  return proto.standard.GetUnitDataByKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.GetUnitDataByKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.GetUnitDataByKeyResponse}
 */
proto.standard.GetUnitDataByKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.standard.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.standard.UnitData;
      reader.readMessage(value,proto.standard.UnitData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.GetUnitDataByKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.GetUnitDataByKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.GetUnitDataByKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.GetUnitDataByKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.standard.UnitData.serializeBinaryToWriter
    );
  }
};


/**
 * optional State State = 1;
 * @return {!proto.standard.State}
 */
proto.standard.GetUnitDataByKeyResponse.prototype.getState = function() {
  return /** @type {!proto.standard.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.standard.State} value */
proto.standard.GetUnitDataByKeyResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.standard.GetUnitDataByKeyResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.standard.GetUnitDataByKeyResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional UnitData Data = 3;
 * @return {?proto.standard.UnitData}
 */
proto.standard.GetUnitDataByKeyResponse.prototype.getData = function() {
  return /** @type{?proto.standard.UnitData} */ (
    jspb.Message.getWrapperField(this, proto.standard.UnitData, 3));
};


/** @param {?proto.standard.UnitData|undefined} value */
proto.standard.GetUnitDataByKeyResponse.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.standard.GetUnitDataByKeyResponse.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.standard.GetUnitDataByKeyResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.DestroyUnitDataByKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.DestroyUnitDataByKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.DestroyUnitDataByKeyRequest.displayName = 'proto.standard.DestroyUnitDataByKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.DestroyUnitDataByKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.DestroyUnitDataByKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.DestroyUnitDataByKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.DestroyUnitDataByKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.DestroyUnitDataByKeyRequest}
 */
proto.standard.DestroyUnitDataByKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.DestroyUnitDataByKeyRequest;
  return proto.standard.DestroyUnitDataByKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.DestroyUnitDataByKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.DestroyUnitDataByKeyRequest}
 */
proto.standard.DestroyUnitDataByKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.DestroyUnitDataByKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.DestroyUnitDataByKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.DestroyUnitDataByKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.DestroyUnitDataByKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.standard.DestroyUnitDataByKeyRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.DestroyUnitDataByKeyRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.DestroyUnitDataByKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.DestroyUnitDataByKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.DestroyUnitDataByKeyResponse.displayName = 'proto.standard.DestroyUnitDataByKeyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.DestroyUnitDataByKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.DestroyUnitDataByKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.DestroyUnitDataByKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.DestroyUnitDataByKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.DestroyUnitDataByKeyResponse}
 */
proto.standard.DestroyUnitDataByKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.DestroyUnitDataByKeyResponse;
  return proto.standard.DestroyUnitDataByKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.DestroyUnitDataByKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.DestroyUnitDataByKeyResponse}
 */
proto.standard.DestroyUnitDataByKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.standard.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.DestroyUnitDataByKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.DestroyUnitDataByKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.DestroyUnitDataByKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.DestroyUnitDataByKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional State State = 1;
 * @return {!proto.standard.State}
 */
proto.standard.DestroyUnitDataByKeyResponse.prototype.getState = function() {
  return /** @type {!proto.standard.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.standard.State} value */
proto.standard.DestroyUnitDataByKeyResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.standard.DestroyUnitDataByKeyResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.standard.DestroyUnitDataByKeyResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UpdateUnitDataBodyByKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UpdateUnitDataBodyByKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UpdateUnitDataBodyByKeyRequest.displayName = 'proto.standard.UpdateUnitDataBodyByKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UpdateUnitDataBodyByKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UpdateUnitDataBodyByKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UpdateUnitDataBodyByKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataBodyByKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UpdateUnitDataBodyByKeyRequest}
 */
proto.standard.UpdateUnitDataBodyByKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UpdateUnitDataBodyByKeyRequest;
  return proto.standard.UpdateUnitDataBodyByKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UpdateUnitDataBodyByKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UpdateUnitDataBodyByKeyRequest}
 */
proto.standard.UpdateUnitDataBodyByKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UpdateUnitDataBodyByKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UpdateUnitDataBodyByKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UpdateUnitDataBodyByKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataBodyByKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.standard.UpdateUnitDataBodyByKeyRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataBodyByKeyRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Body = 2;
 * @return {string}
 */
proto.standard.UpdateUnitDataBodyByKeyRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataBodyByKeyRequest.prototype.setBody = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UpdateUnitDataBodyByKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UpdateUnitDataBodyByKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UpdateUnitDataBodyByKeyResponse.displayName = 'proto.standard.UpdateUnitDataBodyByKeyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UpdateUnitDataBodyByKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UpdateUnitDataBodyByKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UpdateUnitDataBodyByKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataBodyByKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UpdateUnitDataBodyByKeyResponse}
 */
proto.standard.UpdateUnitDataBodyByKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UpdateUnitDataBodyByKeyResponse;
  return proto.standard.UpdateUnitDataBodyByKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UpdateUnitDataBodyByKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UpdateUnitDataBodyByKeyResponse}
 */
proto.standard.UpdateUnitDataBodyByKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.standard.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UpdateUnitDataBodyByKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UpdateUnitDataBodyByKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UpdateUnitDataBodyByKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataBodyByKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional State State = 1;
 * @return {!proto.standard.State}
 */
proto.standard.UpdateUnitDataBodyByKeyResponse.prototype.getState = function() {
  return /** @type {!proto.standard.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.standard.State} value */
proto.standard.UpdateUnitDataBodyByKeyResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.standard.UpdateUnitDataBodyByKeyResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataBodyByKeyResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UpdateUnitDataExpiryTimeByKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.displayName = 'proto.standard.UpdateUnitDataExpiryTimeByKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UpdateUnitDataExpiryTimeByKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expirytime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UpdateUnitDataExpiryTimeByKeyRequest}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UpdateUnitDataExpiryTimeByKeyRequest;
  return proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UpdateUnitDataExpiryTimeByKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UpdateUnitDataExpiryTimeByKeyRequest}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpirytime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UpdateUnitDataExpiryTimeByKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpirytime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 ExpiryTime = 2;
 * @return {number}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.prototype.getExpirytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.standard.UpdateUnitDataExpiryTimeByKeyRequest.prototype.setExpirytime = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UpdateUnitDataExpiryTimeByKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.displayName = 'proto.standard.UpdateUnitDataExpiryTimeByKeyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UpdateUnitDataExpiryTimeByKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UpdateUnitDataExpiryTimeByKeyResponse}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UpdateUnitDataExpiryTimeByKeyResponse;
  return proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UpdateUnitDataExpiryTimeByKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UpdateUnitDataExpiryTimeByKeyResponse}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.standard.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UpdateUnitDataExpiryTimeByKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional State State = 1;
 * @return {!proto.standard.State}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.prototype.getState = function() {
  return /** @type {!proto.standard.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.standard.State} value */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataExpiryTimeByKeyResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UpdateUnitDataDestroyTimeByKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.displayName = 'proto.standard.UpdateUnitDataDestroyTimeByKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UpdateUnitDataDestroyTimeByKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destroytime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UpdateUnitDataDestroyTimeByKeyRequest}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UpdateUnitDataDestroyTimeByKeyRequest;
  return proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UpdateUnitDataDestroyTimeByKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UpdateUnitDataDestroyTimeByKeyRequest}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDestroytime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UpdateUnitDataDestroyTimeByKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestroytime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 DestroyTime = 2;
 * @return {number}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.prototype.getDestroytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.standard.UpdateUnitDataDestroyTimeByKeyRequest.prototype.setDestroytime = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UpdateUnitDataDestroyTimeByKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.displayName = 'proto.standard.UpdateUnitDataDestroyTimeByKeyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UpdateUnitDataDestroyTimeByKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UpdateUnitDataDestroyTimeByKeyResponse}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UpdateUnitDataDestroyTimeByKeyResponse;
  return proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UpdateUnitDataDestroyTimeByKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UpdateUnitDataDestroyTimeByKeyResponse}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.standard.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UpdateUnitDataDestroyTimeByKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional State State = 1;
 * @return {!proto.standard.State}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.prototype.getState = function() {
  return /** @type {!proto.standard.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.standard.State} value */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataDestroyTimeByKeyResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.displayName = 'proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    effectivetime: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest;
  return proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEffectivetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEffectivetime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 EffectiveTime = 2;
 * @return {number}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.prototype.getEffectivetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.standard.UpdateUnitDataEffectiveTimeByKeyRequest.prototype.setEffectivetime = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.displayName = 'proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse;
  return proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.standard.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional State State = 1;
 * @return {!proto.standard.State}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.prototype.getState = function() {
  return /** @type {!proto.standard.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.standard.State} value */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.standard.UpdateUnitDataEffectiveTimeByKeyResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.standard.State = {
  UNKNOWN: 0,
  SUCCESS: 1,
  FAILURE: 2,
  SERVICE_ERROR: 3,
  PARAMS_INVALID: 4,
  ILLEGAL_REQUEST: 5,
  UNIT_DATA_EXPIRED: 6,
  UNIT_DATA_NOT_EXIST: 7,
  UNIT_DATA_NOT_ACTIVE: 8,
  DB_OPERATION_FATLURE: 9
};

goog.object.extend(exports, proto.standard);
